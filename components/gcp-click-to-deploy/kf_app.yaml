# run kubectl create -f kf_app.yaml will deploy kubeflow management app's frontend and backend to your GKE cluster.
# to access web UI, do "kubectl proxy" and open
#     "http://localhost:8001/api/v1/namespaces/default/services/kubeflow-controller:3000/proxy"
# Note: Do not use 127.0.0.1 to replace above localhost otherwise you cannot login with your account.

apiVersion: v1
data:
# Default config assume user access app via kubectl proxy (default at localhost:8001),
# otherwise change address below to your address pointing to controller-backend
  app-config.yaml: |
    appAddress: http://localhost:8001/api/v1/namespaces/default/services/kubeflow-controller:8080/proxy
kind: ConfigMap
metadata:
  name: kubeflow-controller
  namespace: default
---
apiVersion: v1
kind: Service
metadata:
  name: kubeflow-controller
  namespace: default
spec:
  ports:
  - name: web-app
    port: 3000
  - name: backend
    port: 8080
  selector:
    app: kubeflow-controller
  type: ClusterIP
---
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  labels:
    app: kubeflow-controller
  name: kubeflow-controller
  namespace: default
spec:
  replicas: 1
  selector:
    matchLabels:
      app: kubeflow-controller
  template:
    metadata:
      labels:
        app: kubeflow-controller
      namespace: default
    spec:
      containers:
      - name: web-app
        image: gcr.io/kubeflow-images-public/test-app:0806
        ports:
        - containerPort: 3000
        volumeMounts:
        - name: config-volume
          mountPath: /app/src/user_config
      - name: controller-backend
        image: gcr.io/kubeflow-images-public/bootstrapper:latest
        workingDir: /opt/bootstrap
        command: [ "/opt/kubeflow/bootstrapper"]
        args: [
          "--in-cluster",
          "--namespace=kubeflow",
          "--app-dir=/opt/bootstrap/default"
          ]
        ports:
        - containerPort: 8080
      volumes:
      - name: config-volume
        configMap:
          name: kubeflow-controller
